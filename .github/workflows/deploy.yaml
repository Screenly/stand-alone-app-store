name: Deploy

on:
  push:
    branches:
      - master
      - production
  pull_request:
    branches:
      - master
      - production
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    name: Deploy to Cloudflare Pages
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Legacy CI step 1
        run: |
          IMAGE=app_store_srly_io:latest

          docker-compose build

          if [ "$GITHUB_REF_NAME" == 'master' ]; then
            BUILDARGS="_config.yml,_config_stage.yml"
            echo 'BUILD_ENV=stage' >> $GITHUB_ENV

          elif [ "$GITHUB_REF_NAME" == 'production' ]; then
            BUILDARGS="_config.yml"
            echo 'BUILD_ENV=production' >> $GITHUB_ENV
          else
            exit
          fi

          function run_in_container {
            docker run \
              --rm \
              -v "$(pwd)":/usr/src/app \
              -e JEKYLL_ENV=production \
              "$IMAGE" "$@"
          }

          # This is one insane block of code to deal with
          # various permission errors on CI
          run_in_container rm -rf {.asset-cache,_site}
          run_in_container mkdir -p {.asset-cache/sprockets,_site}
          run_in_container chmod a+rwX -R {.asset-cache,_site}
          run_in_container jekyll build --config "$BUILDARGS"
          run_in_container chmod a+rwX -R {_site,.asset-cache}
          run_in_container rm -rf .asset-cache

          find _site

      - name: Legacy CI step 2
        run: |
          IMAGE=app_store_srly_io:latest

          # Deploy to stage
          if [ "$GITHUB_REF_NAME" == 'production' ]; then
            docker run \
              --rm \
              -v "$(pwd)":/usr/src/app \
              -e JEKYLL_ENV=production \
              "$IMAGE" \
              bundle exec htmlproofer ./_site || true
          fi

      - name: Publish
        if: github.event_name != 'pull_request'
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: "app-store-stage"
          directory: _site
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
